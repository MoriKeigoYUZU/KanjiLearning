{"remainingRequest":"/Applications/MAMP/htdocs/frontVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/MAMP/htdocs/frontVue/src/components/Canbas.vue?vue&type=style&index=0&id=213a0e74&scoped=true&lang=css&","dependencies":[{"path":"/Applications/MAMP/htdocs/frontVue/src/components/Canbas.vue","mtime":1573913138725},{"path":"/Applications/MAMP/htdocs/frontVue/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Applications/MAMP/htdocs/frontVue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Applications/MAMP/htdocs/frontVue/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Applications/MAMP/htdocs/frontVue/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/Applications/MAMP/htdocs/frontVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/MAMP/htdocs/frontVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.canvas {\n    border: 1px solid #000;\n}\n\n.moji {\n    font-size: 300%;\n}\n\n",{"version":3,"sources":["Canbas.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmSA;AACA;AACA;;AAEA;AACA;AACA","file":"Canbas.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container class=\"grey lighten-5\">\n        <!--        {{msg}}-->\n        <v-row>\n            <v-col>\n                <canvas width=\"320\" height=\"320\" class=\"canvas\" id=\"canvas\"></canvas>\n            </v-col>\n            <v-col>\n                <v-row>\n                    <v-btn depressed small color=\"primary\" @click=\"save(); dddd()\" large value=\"Click\">保存</v-btn>\n                </v-row>\n                <v-row>\n                    <v-btn depressed small color=\"error\" large href=\"/KanjiLearning\">リセット</v-btn>\n                </v-row>\n            </v-col>\n\n            <v-row>\n                <v-col cols=\"3\"></v-col>\n                <v-col>\n<!--                    <div class=\"moji\">-->\n                    <div id=\"text1\"></div>\n                    <br>\n                        <div id=\"text2\" class=\"moji\"></div>\n                    <br>\n                    <div id=\"text3\"></div>\n<!--                    </div>-->\n                </v-col>\n\n            </v-row>\n            <!--            <v-col cols=\"3\"></v-col>-->\n        </v-row>\n    </v-container>\n</template>\n\n<script>\n    import axios from 'axios';\n\n    export default {\n        name: \"MyCanbas\",\n\n        data() {\n            return {\n                tmp: \"\",\n                msg: \"\",\n            };\n        },\n\n        mounted() {\n            console.log(this.$el)\n            this.MyCanvas()\n        },\n\n        methods: {\n\n            // dddd: function (){\n            //\n            //\n            //     const GET_URL = \"http://localhost:8888/dataBase/get.php\";\n            //     //ここにURL指定。\n            //\n            //     axios.post(GET_URL)\n            //         .then(response => {\n            //             this.msg = response.data;\n            //         }).catch(err => {\n            //         console.log('err:', err);\n            //         this.msg = err;\n            //     });\n            // },\n\n            clearCanvas: function () {\n                //後で書く\n            },\n\n            save: function () {\n\n                var text1 = document.getElementById(\"text1\");\n                text1.innerHTML = \"<p><h1>あなたが書いた字は</h1></p><center></center>\";\n\n                var text2 = document.getElementById(\"text2\");\n                text2.innerHTML = \"<center><h1>木</h1></center>\";\n\n                var text3 = document.getElementById(\"text3\");\n                text3.innerHTML = \"<h1 align='right'>です。</h1>\";\n\n                const nowContext = document.getElementById(\"canvas\");\n                // console.log(nowContext)\n                const nowContextData = nowContext.getContext('2d')\n\n                // console.log(nowContextData);\n\n                let imageData = nowContextData.getImageData(0, 0, 64, 64);\n                // console.log(imageData.data)\n\n\n                let data = imageData.data;\n                let tmp = [];\n                for (var i = 0; i < data.length; i += 4) {\n                    let p = (data[i] == 0 && data[i + 1] == 0 && data[i + 2] == 0) ? 1 : 0;\n                    tmp.push(p);\n                }\n                let array = [];\n                let formated = []\n                for (var i = 0; i < tmp.length; i++) {\n                    if (i != 0 && i % 64 == 0) {\n                        formated.push(array);\n                        array = [];\n                    }\n                    array.push(tmp[i]);\n                }\n                formated.push(array);\n\n                //これを送る\n                console.log(formated);\n\n\n                const POST_URL = \"hoge\"; // この変数に送り先のURLを代入\n                // 送るjson\n                const params = {\n                    // formatedには文字の０１データが二次元配列ではいってる\n                    mojidata: formated\n                };\n                axios.post(POST_URL, params)\n                    .then(response => {\n                        this.msg = response.data;\n                    }).catch(err => {\n                    console.log('err:', err);\n                });\n\n\n            },\n\n            //Canvas部分\n            MyCanvas() {\n                'use strict'\n                // HTMLページを読み込み次第startCanvas()を実行\n                window.addEventListener('load', () => {\n                    setupCanvas();\n                }, false);\n\n                // Canvas要素に漢字を描けるようにするためのメソッド\n                let setupCanvas = () => {\n                    // Canvasがサポートされていない場合\n                    if (!document.createElement('canvas').getContext) return;\n                    let canvas = document.getElementsByTagName('canvas');\n                    for (var i = 0; i < canvas.length; i++) {\n                        fillWhite(canvas[i]);\n                        // 基準線を引く\n                        drawDottedLine(canvas[i]);\n                        // 鉛筆の初期化\n                        initPencil(canvas[i]);\n                        // canvas上で描くためのListenerなどの設定\n\n                        setupListener(canvas[i]);\n                    }\n                }\n\n                // 漢字を書く枠内にグレーの基準線を描くメソッド\n                let drawDottedLine = (canvas) => {\n                    let context = canvas.getContext('2d');\n                    context.beginPath();\n                    context.strokeStyle = '#999';\n                    context.moveTo(canvas.width / 2, 0);\n                    for (var i = 0; i < canvas.height; i += 4) {\n                        context.lineTo(canvas.width / 2, i + 2);\n                        context.moveTo(canvas.width / 2, i + 4);\n                    }\n                    context.moveTo(0, canvas.height / 2);\n                    for (var i = 0; i < canvas.width; i += 4) {\n                        context.lineTo(i + 2, canvas.height / 2);\n                        context.moveTo(i + 4, canvas.height / 2);\n                    }\n                    context.stroke();\n                }\n\n                let fillWhite = (canvas) => {\n                    let context = canvas.getContext('2d');\n                    context.fillStyle = 'rgb(255, 255, 255, 255)';\n                    context.fillRect(0, 0, canvas.width, canvas.height);\n                }\n\n                /*\n                リスナーなどの設定\n                canvasの動き方など、アプリケーションとしての機能は全てこの中に\n                */\n                let setupListener = (canvas) => {\n                    let context = canvas.getContext('2d');\n                    let rect = canvas.getBoundingClientRect();\n                    let mousePressed = false;\n                    let posOrigin = {x: 0, y: 0};\n                    // マウスが押された時\n                    window.addEventListener('mousedown', () => {\n                        posOrigin.x = event.clientX - rect.left;\n                        posOrigin.y = event.clientY - rect.top\n                        mousePressed = true;\n                    }, false);\n                    // マウスが離された時\n                    window.addEventListener('mouseup', () => {\n                        mousePressed = false;\n                    }, false);\n                    // canvas上でマウスが押されている状態で動かした時\n                    canvas.addEventListener('mousemove', (event) => {\n                        if (mousePressed) {\n                            let posX = event.clientX - rect.left;\n                            let posY = event.clientY - rect.top\n                            context.moveTo(posOrigin.x, posOrigin.y);\n                            context.lineTo(posX, posY);\n                            context.stroke();\n                            posOrigin.x = posX;\n                            posOrigin.y = posY;\n                        }\n                    }, false);\n\n                    // ダブルクリックした時\n                    canvas.addEventListener('dblclick', () => {\n                        canvas.width = canvas.width;\n                        fillWhite(canvas);\n                        drawDottedLine(canvas);\n                        initPencil(canvas);\n                    });\n                }\n\n                // 鉛筆の太さや色などの初期化を行うメソッド\n                let initPencil = (canvas) => {\n                    let context = canvas.getContext('2d');\n                    let rect = canvas.getBoundingClientRect();\n                    context.beginPath();\n                    context.lineWidth = rect.width / 30;\n                    context.lineCap = 'round';\n                    context.strokeStyle = 'rgb(0, 0, 0, 255)';\n                }\n\n                window.addEventListener('load', () => {\n                    let button = document.getElementById('button');\n                    button.addEventListener('click', () => {\n                        let oldCanvas = document.getElementById('canvas');\n\n                        let canvas = document.createElement('canvas');\n                        canvas.width = 64;\n                        canvas.height = 64;\n                        let context = canvas.getContext('2d');\n                        context.drawImage(oldCanvas, 0, 0, 64, 64);\n\n                        let imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n\n\n                        let data = imageData.data;\n                        let tmp = [];\n                        for (var i = 0; i < data.length; i += 4) {\n                            let p = (data[i] == 0 && data[i + 1] == 0 && data[i + 2] == 0) ? 0 : 1;\n                            tmp.push(p);\n                        }\n                        let array = [];\n                        let formated = []\n                        for (var i = 0; i < tmp.length; i++) {\n                            if (i != 0 && i % canvas.width == 0) {\n                                formated.push(array);\n                                array = [];\n                            }\n                            array.push(tmp[i]);\n                        }\n                        formated.push(array);\n                        $.ajax({\n                            url: './setjson.php',\n                            type: 'POST',\n                            data: {\n                                'json': JSON.stringify(formated)\n                            }\n                        })\n\n                        // Ajaxリクエストが成功した時発動\n                            .done((json) => {\n                                console.log(JSON.parse(json));\n                            })\n\n                            // Ajaxリクエストが失敗した時発動\n                            .fail((data) => {\n                                console.log('fail');\n                            })\n\n                            // Ajaxリクエストが成功・失敗どちらでも発動\n                            .always((data) => {\n\n                            });\n                    }, false);\n                }, false);\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    .canvas {\n        border: 1px solid #000;\n    }\n\n    .moji {\n        font-size: 300%;\n    }\n\n</style>"]}]}