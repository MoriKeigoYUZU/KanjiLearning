{"remainingRequest":"/Users/k18105kk/src/Vue/puro/my-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/k18105kk/src/Vue/puro/my-app/src/components/Canbas.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/k18105kk/src/Vue/puro/my-app/src/components/Canbas.vue","mtime":1570522496752},{"path":"/Users/k18105kk/src/Vue/puro/my-app/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/Users/k18105kk/src/Vue/puro/my-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/k18105kk/src/Vue/puro/my-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nexport default {\n    name: \"MyCanbas\",\n\n    mounted(){\n        console.log(this.$el)\n        this.MyCanvas()\n    },\n\n    methods: {\n\n        //Canvas部分\n        MyCanvas() {\n            'use strict'\n            // HTMLページを読み込み次第startCanvas()を実行\n            window.addEventListener('load', () => {\n                setupCanvas();\n            }, false);\n\n            // Canvas要素に漢字を描けるようにするためのメソッド\n            let setupCanvas = () => {\n                // Canvasがサポートされていない場合\n                if (!document.createElement('canvas').getContext) return;\n                let canvas = document.getElementsByTagName('canvas');\n                for (var i = 0; i < canvas.length; i++) {\n                    fillWhite(canvas[i]);\n                    // 基準線を引く\n                    drawDottedLine(canvas[i]);\n                    // 鉛筆の初期化\n                    initPencil(canvas[i]);\n                    // canvas上で描くためのListenerなどの設定\n\n                    setupListener(canvas[i]);\n                }\n            }\n\n            // 漢字を書く枠内にグレーの基準線を描くメソッド\n            let drawDottedLine = (canvas) => {\n                let context = canvas.getContext('2d');\n                context.beginPath();\n                context.strokeStyle = '#999';\n                context.moveTo(canvas.width / 2, 0);\n                for (var i = 0; i < canvas.height; i += 4) {\n                    context.lineTo(canvas.width / 2, i + 2);\n                    context.moveTo(canvas.width / 2, i + 4);\n                }\n                context.moveTo(0, canvas.height / 2);\n                for (var i = 0; i < canvas.width; i += 4) {\n                    context.lineTo(i + 2, canvas.height / 2);\n                    context.moveTo(i + 4, canvas.height / 2);\n                }\n                context.stroke();\n            }\n\n            let fillWhite = (canvas) => {\n                let context = canvas.getContext('2d');\n                context.fillStyle = 'rgb(255, 255, 255, 255)';\n                context.fillRect(0, 0, canvas.width, canvas.height);\n            }\n\n            /*\n            リスナーなどの設定\n            canvasの動き方など、アプリケーションとしての機能は全てこの中に\n            */\n            let setupListener = (canvas) => {\n                let context = canvas.getContext('2d');\n                let rect = canvas.getBoundingClientRect();\n                let mousePressed = false;\n                let posOrigin = {x: 0, y: 0};\n                // マウスが押された時\n                window.addEventListener('mousedown', () => {\n                    posOrigin.x = event.clientX - rect.left;\n                    posOrigin.y = event.clientY - rect.top\n                    mousePressed = true;\n                }, false);\n                // マウスが離された時\n                window.addEventListener('mouseup', () => {\n                    mousePressed = false;\n                }, false);\n                // canvas上でマウスが押されている状態で動かした時\n                canvas.addEventListener('mousemove', (event) => {\n                    if (mousePressed) {\n                        let posX = event.clientX - rect.left;\n                        let posY = event.clientY - rect.top\n                        context.moveTo(posOrigin.x, posOrigin.y);\n                        context.lineTo(posX, posY);\n                        context.stroke();\n                        posOrigin.x = posX;\n                        posOrigin.y = posY;\n                    }\n                }, false);\n                // ダブルクリックした時\n                canvas.addEventListener('dblclick', () => {\n                    canvas.width = canvas.width;\n                    fillWhite(canvas);\n                    drawDottedLine(canvas);\n                    initPencil(canvas);\n                });\n            }\n\n            // 鉛筆の太さや色などの初期化を行うメソッド\n            let initPencil = (canvas) => {\n                let context = canvas.getContext('2d');\n                let rect = canvas.getBoundingClientRect();\n                context.beginPath();\n                context.lineWidth = rect.width / 23;\n                context.lineCap = 'round';\n                context.strokeStyle = 'rgb(0, 0, 0, 255)';\n            }\n\n            // window.addEventListener('load', () => {\n            //     let button = document.getElementById('button');\n            //     button.addEventListener('click', () => {\n            //         let oldCanvas = document.getElementById('canvas');\n            //\n            //         let canvas = document.createElement('canvas');\n            //         canvas.width = 64;\n            //         canvas.height = 64;\n            //         let context = canvas.getContext('2d');\n            //         context.drawImage(oldCanvas, 0, 0, 64, 64);\n            //\n            //         let imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n            //\n            //\n            //         let data = imageData.data;\n            //         let tmp = [];\n            //         for (var i = 0; i < data.length; i+=4) {\n            //             let p = (data[i] == 0 && data[i+1] == 0 && data[i+2] == 0) ? 0 : 1;\n            //             tmp.push(p);\n            //         }\n            //         let array = [];\n            //         let formated = []\n            //         for (var i = 0; i < tmp.length; i++) {\n            //             if (i != 0 && i%canvas.width == 0) {\n            //                 formated.push(array);\n            //                 array = [];\n            //             }\n            //             array.push(tmp[i]);\n            //         }\n            //         formated.push(array);\n            //         $.ajax({\n            //             url:'./setjson.php',\n            //             type:'POST',\n            //             data:{\n            //                 'json': JSON.stringify(formated)\n            //             }\n            //         })\n            //\n            //         // Ajaxリクエストが成功した時発動\n            //         .done( (json) => {\n            //             console.log(JSON.parse(json));\n            //         })\n            //\n            //         // Ajaxリクエストが失敗した時発動\n            //         .fail( (data) => {\n            //             console.log('fail');\n            //         })\n            //\n            //         // Ajaxリクエストが成功・失敗どちらでも発動\n            //         .always( (data) => {\n            //\n            //         });\n            //     }, false);\n            // }, false);\n        }\n    }\n}\n",{"version":3,"sources":["Canbas.vue"],"names":[],"mappings":";;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Canbas.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <canvas width=\"200\" height=\"200\" class=\"canvas\" id=\"canvas\"></canvas>\n</template>\n\n<script>\n    export default {\n        name: \"MyCanbas\",\n\n        mounted(){\n            console.log(this.$el)\n            this.MyCanvas()\n        },\n\n        methods: {\n\n            //Canvas部分\n            MyCanvas() {\n                'use strict'\n                // HTMLページを読み込み次第startCanvas()を実行\n                window.addEventListener('load', () => {\n                    setupCanvas();\n                }, false);\n\n                // Canvas要素に漢字を描けるようにするためのメソッド\n                let setupCanvas = () => {\n                    // Canvasがサポートされていない場合\n                    if (!document.createElement('canvas').getContext) return;\n                    let canvas = document.getElementsByTagName('canvas');\n                    for (var i = 0; i < canvas.length; i++) {\n                        fillWhite(canvas[i]);\n                        // 基準線を引く\n                        drawDottedLine(canvas[i]);\n                        // 鉛筆の初期化\n                        initPencil(canvas[i]);\n                        // canvas上で描くためのListenerなどの設定\n\n                        setupListener(canvas[i]);\n                    }\n                }\n\n                // 漢字を書く枠内にグレーの基準線を描くメソッド\n                let drawDottedLine = (canvas) => {\n                    let context = canvas.getContext('2d');\n                    context.beginPath();\n                    context.strokeStyle = '#999';\n                    context.moveTo(canvas.width / 2, 0);\n                    for (var i = 0; i < canvas.height; i += 4) {\n                        context.lineTo(canvas.width / 2, i + 2);\n                        context.moveTo(canvas.width / 2, i + 4);\n                    }\n                    context.moveTo(0, canvas.height / 2);\n                    for (var i = 0; i < canvas.width; i += 4) {\n                        context.lineTo(i + 2, canvas.height / 2);\n                        context.moveTo(i + 4, canvas.height / 2);\n                    }\n                    context.stroke();\n                }\n\n                let fillWhite = (canvas) => {\n                    let context = canvas.getContext('2d');\n                    context.fillStyle = 'rgb(255, 255, 255, 255)';\n                    context.fillRect(0, 0, canvas.width, canvas.height);\n                }\n\n                /*\n                リスナーなどの設定\n                canvasの動き方など、アプリケーションとしての機能は全てこの中に\n                */\n                let setupListener = (canvas) => {\n                    let context = canvas.getContext('2d');\n                    let rect = canvas.getBoundingClientRect();\n                    let mousePressed = false;\n                    let posOrigin = {x: 0, y: 0};\n                    // マウスが押された時\n                    window.addEventListener('mousedown', () => {\n                        posOrigin.x = event.clientX - rect.left;\n                        posOrigin.y = event.clientY - rect.top\n                        mousePressed = true;\n                    }, false);\n                    // マウスが離された時\n                    window.addEventListener('mouseup', () => {\n                        mousePressed = false;\n                    }, false);\n                    // canvas上でマウスが押されている状態で動かした時\n                    canvas.addEventListener('mousemove', (event) => {\n                        if (mousePressed) {\n                            let posX = event.clientX - rect.left;\n                            let posY = event.clientY - rect.top\n                            context.moveTo(posOrigin.x, posOrigin.y);\n                            context.lineTo(posX, posY);\n                            context.stroke();\n                            posOrigin.x = posX;\n                            posOrigin.y = posY;\n                        }\n                    }, false);\n                    // ダブルクリックした時\n                    canvas.addEventListener('dblclick', () => {\n                        canvas.width = canvas.width;\n                        fillWhite(canvas);\n                        drawDottedLine(canvas);\n                        initPencil(canvas);\n                    });\n                }\n\n                // 鉛筆の太さや色などの初期化を行うメソッド\n                let initPencil = (canvas) => {\n                    let context = canvas.getContext('2d');\n                    let rect = canvas.getBoundingClientRect();\n                    context.beginPath();\n                    context.lineWidth = rect.width / 23;\n                    context.lineCap = 'round';\n                    context.strokeStyle = 'rgb(0, 0, 0, 255)';\n                }\n\n                // window.addEventListener('load', () => {\n                //     let button = document.getElementById('button');\n                //     button.addEventListener('click', () => {\n                //         let oldCanvas = document.getElementById('canvas');\n                //\n                //         let canvas = document.createElement('canvas');\n                //         canvas.width = 64;\n                //         canvas.height = 64;\n                //         let context = canvas.getContext('2d');\n                //         context.drawImage(oldCanvas, 0, 0, 64, 64);\n                //\n                //         let imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n                //\n                //\n                //         let data = imageData.data;\n                //         let tmp = [];\n                //         for (var i = 0; i < data.length; i+=4) {\n                //             let p = (data[i] == 0 && data[i+1] == 0 && data[i+2] == 0) ? 0 : 1;\n                //             tmp.push(p);\n                //         }\n                //         let array = [];\n                //         let formated = []\n                //         for (var i = 0; i < tmp.length; i++) {\n                //             if (i != 0 && i%canvas.width == 0) {\n                //                 formated.push(array);\n                //                 array = [];\n                //             }\n                //             array.push(tmp[i]);\n                //         }\n                //         formated.push(array);\n                //         $.ajax({\n                //             url:'./setjson.php',\n                //             type:'POST',\n                //             data:{\n                //                 'json': JSON.stringify(formated)\n                //             }\n                //         })\n                //\n                //         // Ajaxリクエストが成功した時発動\n                //         .done( (json) => {\n                //             console.log(JSON.parse(json));\n                //         })\n                //\n                //         // Ajaxリクエストが失敗した時発動\n                //         .fail( (data) => {\n                //             console.log('fail');\n                //         })\n                //\n                //         // Ajaxリクエストが成功・失敗どちらでも発動\n                //         .always( (data) => {\n                //\n                //         });\n                //     }, false);\n                // }, false);\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    .canvas {\n        border: 1px solid #000;\n    }\n</style>"]}]}